#!/bin/sh

echo "init: starting dual mode"

mount -t proc proc /proc || echo "init: WARNING: mount /proc failed."
mount -t sysfs sysfs /sys || echo "init: WARNING: mount /sys failed."

mount -t devtmpfs devtmpfs /dev || echo "init: ERROR: mount /dev failed. Cannot continue."
if [ -x /sbin/mdev ]; then
  echo /sbin/mdev >/proc/sys/kernel/hotplug 2>/dev/null
  /sbin/mdev -s
  echo "init: mdev run complete."
else
  echo "init: WARNING: mdev not found."
fi

CMDLINE=$(cat /proc/cmdline 2>/dev/null)

ROOTDEV_PARAM=$(echo "$CMDLINE" | grep -o 'root=[^ ]*' | cut -d= -f2)
MODE_FLAG=$(echo "$CMDLINE" | grep -E -o 'persistence|ephemeral' | head -n 1)

if [ -z "$MODE_FLAG" ]; then
  MODE_FLAG="persistence"
  echo "init: WARNING: no mode flag. Defaulting to $MODE_FLAG mode. The OS will function normally"
fi

if [ -z "$ROOTDEV_PARAM" ]; then
  ROOTDEV="LABEL=CYPHER_BASE"
  echo "init: WARNING: no root= param. Defaulting to $ROOTDEV."
else
  ROOTDEV="$ROOTDEV_PARAM"
fi

echo "init: Final target -> $ROOTDEV (Mode: $MODE_FLAG)"

TARGET_DEV_PATH=$(/sbin/findfs "$ROOTDEV" 2>/dev/null)

MAX_WAIT=15
count=0

echo "init: Waiting up to $MAX_WAIT seconds for $ROOTDEV to appear..."

while [ -z "$TARGET_DEV_PATH" ] && [ $count -lt $MAX_WAIT ]; do
    /sbin/mdev -s 2>/dev/null
    sleep 1
    TARGET_DEV_PATH=$(/sbin/findfs "$ROOTDEV" 2>/dev/null)
    count=$((count + 1))
done

if [ -z "$TARGET_DEV_PATH" ]; then
    echo "init: ERROR: Target device ($ROOTDEV) did not appear after $MAX_WAIT seconds. Dropping to shell."
    exec /bin/sh
fi
echo "init: Target device found at $TARGET_DEV_PATH."

mkdir -p /mnt/temp_root
mkdir -p /newroot

SNAPSHOT_NAME=""
DEFAULT_BTRFS_OPTIONS="rw,subvol=@"
FINAL_MOUNT_OPTIONS="$DEFAULT_BTRFS_OPTIONS"
TEMP_MOUNT_OPTIONS="rw"

ROLLBACK_REQUIRED=0 

if mount -t btrfs -o rw,subvolid=5 "$TARGET_DEV_PATH" /mnt/temp_root; then 

    FLAG_FILE="/mnt/temp_root/.snapshots/tenet_target.txt"

    if [ -f "$FLAG_FILE" ]; then
        FLAG_CONTENT=$(cat "$FLAG_FILE")
        echo "FLAGFILE FOUND:$(echo $FLAG_FILE)"
        if echo "$FLAG_CONTENT" | grep -q "^ONETIME:"; then
        ROLLBACK_MODE_EPHEMERAL=1

        SNAPSHOT_NAME=$(echo "$FLAG_CONTENT" | sed 's/^ONETIME://')
        echo "init: TENET ONE-TIME VISIT DETECTED."
        MODE_FLAG="ephemeral"
    else 
        ROLLBACK_MODE_EPHEMERAL=0
        echo "init: TENET PERMANENT ROLLBACK DETECTED."
    fi
        
        if [ -n "$SNAPSHOT_NAME" ]; then
            SNAPSHOT_BTRFS_PATH=".snapshots/$SNAPSHOT_NAME"
            
            if [ -d "/mnt/temp_root/$SNAPSHOT_BTRFS_PATH" ]; then
                echo "init: TENET SNAPSHOT FOUND: Targeting subvolume $SNAPSHOT_NAME"
                
                FINAL_MOUNT_OPTIONS="rw,subvol=$SNAPSHOT_BTRFS_PATH"
                echo "init: Snapshot root mount options: $FINAL_MOUNT_OPTIONS"
                
                ROLLBACK_REQUIRED=1
            else
                echo "init: WARNING: Snapshot directory missing. Falling back to default root."
                /bin/rm -f "$FLAG_FILE" 2>/dev/null
                sync
            fi
        fi
    fi

    if [ "$ROLLBACK_REQUIRED" -eq 1 ]; then
        if [ "$ROLLBACK_MODE_EPHEMERAL" -eq 0 ]; then
            echo "init: Performing permanent rollback operation (Rename Subvolumes)..."

            ROLLBACK_SUCCESS=0
            
            if [ -d "/mnt/temp_root/@" ]; then
                echo "init: Renaming old @ to @_old"
                /bin/mv /mnt/temp_root/@ /mnt/temp_root/@_old 2>/dev/null
            fi

            echo "init: Renaming $SNAPSHOT_BTRFS_PATH to @"
            if /bin/mv /mnt/temp_root/"$SNAPSHOT_BTRFS_PATH" /mnt/temp_root/@; then
                echo "init: Success: Snapshot is now the new @ subvolume!"
                
                FINAL_MOUNT_OPTIONS="rw,subvol=@"
                ROLLBACK_SUCCESS=1

                if [ -d "/mnt/temp_root/@_old" ]; then
                    echo "init: Removing old root @_old subvolume."
                    if [ -x /sbin/btrfs ]; then
                        if /sbin/btrfs subvolume delete /mnt/temp_root/@_old; then
                            echo "init: Deleted the @_old subvolume."
                        else
                            echo "init: WARNING: btrfs delete failed for @_old. Manual cleanup needed."
                        fi
                    else
                        echo "init: WARNING: /sbin/btrfs not found. Cannot delete @_old. Manual cleanup needed!"
                    fi
                fi

            else
                echo "init: CRITICAL WARNING: Failed to rename snapshot to @. Fallback mount will be used."
            fi

            if [ "$ROLLBACK_SUCCESS" -eq 1 ]; then
                echo "init: Removing rollback flag file."
                /bin/rm -f "$FLAG_FILE" 2>/dev/null
                sync
            else
                echo "init: Keeping rollback flag for re-attempt on next boot."
            fi

        elif [ "$ROLLBACK_MODE_EPHEMERAL" -eq 1 ]; then
          echo "init: ONE-TIME VISIT: Will boot into Ephemeral mode."
          echo "init: Removing rollback flag file for one-time visit."
          /bin/rm -f "$FLAG_FILE" 2>/dev/null
          sync
        fi
    fi

    umount /mnt/temp_root 2>/dev/null
else
    echo "init: ERROR: Could not mount top-level Btrfs for check and permanence. Using default $FINAL_MOUNT_OPTIONS."
fi


if [ "$MODE_FLAG" = "persistence" ]; then
    
    echo "init: PERSISTENCE MODE SELECTED. Mounting $TARGET_DEV_PATH with options: $FINAL_MOUNT_OPTIONS"
    sleep 2
    
    if ! mount -t btrfs -o "$FINAL_MOUNT_OPTIONS" "$TARGET_DEV_PATH" /newroot; then
      echo "init: ERROR: Final Btrfs mount of $TARGET_DEV_PATH failed! Dropping to shell."
      exec /bin/sh
    fi
    
elif [ "$MODE_FLAG" = "ephemeral" ]; then
    
    mkdir -p /live/readonly /live/rw /live/work
    
    echo "init: Mounting read only base system ($TARGET_DEV_PATH) to /live/readonly"
    sleep 2
    
    if ! mount -t btrfs -o "ro,$FINAL_MOUNT_OPTIONS" "$TARGET_DEV_PATH" /live/readonly; then
      echo "init: ERROR: mount base system failed. Dropping to shell."
      exec /bin/sh
    fi

    UPPER_MOUNT_POINT="/live/rw"
    UPPER_DIR="/live/rw/upper"
    WORK_DIR="/live/rw/work"
    
    RAM_SIZE="13G"
    echo "init: EPHEMERAL MODE: Setting up tmpfs writable layer (size=$RAM_SIZE)."
    if ! mount -t tmpfs -o size=$RAM_SIZE tmpfs "$UPPER_MOUNT_POINT"; then
      echo "init: ERROR: tmpfs mount failed. Dropping to shell."
      umount /live/readonly 2>/dev/null
      exec /bin/sh
    fi
    
    mkdir -p "$UPPER_DIR" "$WORK_DIR"
        
    OVERLAY_OPTS="lowerdir=/live/readonly,upperdir=$UPPER_DIR,workdir=$WORK_DIR"
    echo "init: Mounting overlay merged root to /newroot (Mode: $MODE_FLAG)"
    
    if ! mount -t overlay overlay -o "$OVERLAY_OPTS" /newroot; then
      echo "init: FATAL ERROR: overlay mount failed. Dropping to shell."
      umount /live/readonly 2>/dev/null
      umount "$UPPER_MOUNT_POINT" 2>/dev/null
      exec /bin/sh
    fi
fi

echo "init: Success. Starting real init."
REAL_INIT="/sbin/init1"

if [ -x /bin/switch_root ]; then
  SWITCH_ROOT_BIN="/bin/switch_root"
elif [ -x /sbin/switch_root ]; then
  SWITCH_ROOT_BIN="/sbin/switch_root"
fi

if [ -x "$SWITCH_ROOT_BIN" ]; then
  exec "$SWITCH_ROOT_BIN" /newroot "$REAL_INIT"
else
  mount --move /proc /newroot/proc 2>/dev/null
  mount --move /sys /newroot/sys 2>/dev/null
  mount --move /dev /newroot/dev 2>/dev/null

  /bin/pivot_root /newroot /newroot/oldroot

  umount /oldroot 2>/dev/null
  rmdir /oldroot 2>/dev/null
  
  exec "$REAL_INIT"
fi
